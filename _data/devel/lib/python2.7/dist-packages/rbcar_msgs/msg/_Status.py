# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rbcar_msgs/Status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Status(genpy.Message):
  _md5sum = "f7f174af500841ec0ad1e8c997de3e08"
  _type = "rbcar_msgs/Status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string CONTROL_MODE_AUTO=auto
string CONTROL_MODE_MANUAL=manual
string CONTROL_MODE_UNKNOWN=unknown

string SUBSTATE_INIT=init
string SUBSTATE_MANUAL=manual
string SUBSTATE_GO_MANUAL=go_manual
string SUBSTATE_AUTO=auto
string SUBSTATE_GO_AUTO=go_auto
string SUBSTATE_ERROR=error


# current control_mode
string control_mode
# current position of the control mode switch (hardware)
string control_switch
# Flat to show if hardware stop signal is active
bool hardware_stop

# overall state
string state
# subcomponents' state
string steering_controller_state
string traction_controller_state

# internal substate to manage changes in control mode
string substate
"""
  # Pseudo-constants
  CONTROL_MODE_AUTO = 'auto'
  CONTROL_MODE_MANUAL = 'manual'
  CONTROL_MODE_UNKNOWN = 'unknown'
  SUBSTATE_INIT = 'init'
  SUBSTATE_MANUAL = 'manual'
  SUBSTATE_GO_MANUAL = 'go_manual'
  SUBSTATE_AUTO = 'auto'
  SUBSTATE_GO_AUTO = 'go_auto'
  SUBSTATE_ERROR = 'error'

  __slots__ = ['control_mode','control_switch','hardware_stop','state','steering_controller_state','traction_controller_state','substate']
  _slot_types = ['string','string','bool','string','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_mode,control_switch,hardware_stop,state,steering_controller_state,traction_controller_state,substate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.control_mode is None:
        self.control_mode = ''
      if self.control_switch is None:
        self.control_switch = ''
      if self.hardware_stop is None:
        self.hardware_stop = False
      if self.state is None:
        self.state = ''
      if self.steering_controller_state is None:
        self.steering_controller_state = ''
      if self.traction_controller_state is None:
        self.traction_controller_state = ''
      if self.substate is None:
        self.substate = ''
    else:
      self.control_mode = ''
      self.control_switch = ''
      self.hardware_stop = False
      self.state = ''
      self.steering_controller_state = ''
      self.traction_controller_state = ''
      self.substate = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.control_switch
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hardware_stop
      buff.write(_get_struct_B().pack(_x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.steering_controller_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.traction_controller_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.substate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_switch = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_switch = str[start:end]
      start = end
      end += 1
      (self.hardware_stop,) = _get_struct_B().unpack(str[start:end])
      self.hardware_stop = bool(self.hardware_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.steering_controller_state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.steering_controller_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.traction_controller_state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.traction_controller_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.substate = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.substate = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.control_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.control_switch
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hardware_stop
      buff.write(_get_struct_B().pack(_x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.steering_controller_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.traction_controller_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.substate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_switch = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_switch = str[start:end]
      start = end
      end += 1
      (self.hardware_stop,) = _get_struct_B().unpack(str[start:end])
      self.hardware_stop = bool(self.hardware_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.steering_controller_state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.steering_controller_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.traction_controller_state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.traction_controller_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.substate = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.substate = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
