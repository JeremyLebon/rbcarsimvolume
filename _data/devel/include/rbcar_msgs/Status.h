// Generated by gencpp from file rbcar_msgs/Status.msg
// DO NOT EDIT!


#ifndef RBCAR_MSGS_MESSAGE_STATUS_H
#define RBCAR_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rbcar_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : control_mode()
    , control_switch()
    , hardware_stop(false)
    , state()
    , steering_controller_state()
    , traction_controller_state()
    , substate()  {
    }
  Status_(const ContainerAllocator& _alloc)
    : control_mode(_alloc)
    , control_switch(_alloc)
    , hardware_stop(false)
    , state(_alloc)
    , steering_controller_state(_alloc)
    , traction_controller_state(_alloc)
    , substate(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_mode_type;
  _control_mode_type control_mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_switch_type;
  _control_switch_type control_switch;

   typedef uint8_t _hardware_stop_type;
  _hardware_stop_type hardware_stop;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _steering_controller_state_type;
  _steering_controller_state_type steering_controller_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _traction_controller_state_type;
  _traction_controller_state_type traction_controller_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _substate_type;
  _substate_type substate;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CONTROL_MODE_AUTO)
  #undef CONTROL_MODE_AUTO
#endif
#if defined(_WIN32) && defined(CONTROL_MODE_MANUAL)
  #undef CONTROL_MODE_MANUAL
#endif
#if defined(_WIN32) && defined(CONTROL_MODE_UNKNOWN)
  #undef CONTROL_MODE_UNKNOWN
#endif
#if defined(_WIN32) && defined(SUBSTATE_INIT)
  #undef SUBSTATE_INIT
#endif
#if defined(_WIN32) && defined(SUBSTATE_MANUAL)
  #undef SUBSTATE_MANUAL
#endif
#if defined(_WIN32) && defined(SUBSTATE_GO_MANUAL)
  #undef SUBSTATE_GO_MANUAL
#endif
#if defined(_WIN32) && defined(SUBSTATE_AUTO)
  #undef SUBSTATE_AUTO
#endif
#if defined(_WIN32) && defined(SUBSTATE_GO_AUTO)
  #undef SUBSTATE_GO_AUTO
#endif
#if defined(_WIN32) && defined(SUBSTATE_ERROR)
  #undef SUBSTATE_ERROR
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CONTROL_MODE_AUTO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CONTROL_MODE_MANUAL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CONTROL_MODE_UNKNOWN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SUBSTATE_INIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SUBSTATE_MANUAL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SUBSTATE_GO_MANUAL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SUBSTATE_AUTO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SUBSTATE_GO_AUTO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SUBSTATE_ERROR;

  typedef boost::shared_ptr< ::rbcar_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rbcar_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::rbcar_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::rbcar_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::rbcar_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::CONTROL_MODE_AUTO =
        
          "auto"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::CONTROL_MODE_MANUAL =
        
          "manual"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::CONTROL_MODE_UNKNOWN =
        
          "unknown"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::SUBSTATE_INIT =
        
          "init"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::SUBSTATE_MANUAL =
        
          "manual"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::SUBSTATE_GO_MANUAL =
        
          "go_manual"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::SUBSTATE_AUTO =
        
          "auto"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::SUBSTATE_GO_AUTO =
        
          "go_auto"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Status_<ContainerAllocator>::SUBSTATE_ERROR =
        
          "error"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rbcar_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rbcar_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rbcar_msgs::Status_<ContainerAllocator1> & lhs, const ::rbcar_msgs::Status_<ContainerAllocator2> & rhs)
{
  return lhs.control_mode == rhs.control_mode &&
    lhs.control_switch == rhs.control_switch &&
    lhs.hardware_stop == rhs.hardware_stop &&
    lhs.state == rhs.state &&
    lhs.steering_controller_state == rhs.steering_controller_state &&
    lhs.traction_controller_state == rhs.traction_controller_state &&
    lhs.substate == rhs.substate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rbcar_msgs::Status_<ContainerAllocator1> & lhs, const ::rbcar_msgs::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rbcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rbcar_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rbcar_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbcar_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rbcar_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbcar_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rbcar_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rbcar_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7f174af500841ec0ad1e8c997de3e08";
  }

  static const char* value(const ::rbcar_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7f174af500841ecULL;
  static const uint64_t static_value2 = 0x0ad1e8c997de3e08ULL;
};

template<class ContainerAllocator>
struct DataType< ::rbcar_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rbcar_msgs/Status";
  }

  static const char* value(const ::rbcar_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rbcar_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string CONTROL_MODE_AUTO=auto\n"
"string CONTROL_MODE_MANUAL=manual\n"
"string CONTROL_MODE_UNKNOWN=unknown\n"
"\n"
"string SUBSTATE_INIT=init\n"
"string SUBSTATE_MANUAL=manual\n"
"string SUBSTATE_GO_MANUAL=go_manual\n"
"string SUBSTATE_AUTO=auto\n"
"string SUBSTATE_GO_AUTO=go_auto\n"
"string SUBSTATE_ERROR=error\n"
"\n"
"\n"
"# current control_mode\n"
"string control_mode\n"
"# current position of the control mode switch (hardware)\n"
"string control_switch\n"
"# Flat to show if hardware stop signal is active\n"
"bool hardware_stop\n"
"\n"
"# overall state\n"
"string state\n"
"# subcomponents' state\n"
"string steering_controller_state\n"
"string traction_controller_state\n"
"\n"
"# internal substate to manage changes in control mode\n"
"string substate\n"
;
  }

  static const char* value(const ::rbcar_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rbcar_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_mode);
      stream.next(m.control_switch);
      stream.next(m.hardware_stop);
      stream.next(m.state);
      stream.next(m.steering_controller_state);
      stream.next(m.traction_controller_state);
      stream.next(m.substate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rbcar_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rbcar_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "control_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_mode);
    s << indent << "control_switch: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_switch);
    s << indent << "hardware_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hardware_stop);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "steering_controller_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.steering_controller_state);
    s << indent << "traction_controller_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.traction_controller_state);
    s << indent << "substate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.substate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RBCAR_MSGS_MESSAGE_STATUS_H
